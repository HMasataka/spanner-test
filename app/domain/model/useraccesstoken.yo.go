// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// UserAccessToken represents a row from 'UserAccessToken'.
type UserAccessToken struct {
	UserID    string    `spanner:"UserID" json:"UserID"`       // UserID
	Token     string    `spanner:"Token" json:"Token"`         // Token
	UpdatedAt time.Time `spanner:"UpdatedAt" json:"UpdatedAt"` // UpdatedAt
}

const UserAccessToken_UserID = "UserID"
const UserAccessToken_Token = "Token"
const UserAccessToken_UpdatedAt = "UpdatedAt"

func UserAccessTokenPrimaryKeys() []string {
	return []string{
		UserAccessToken_UserID,
	}
}

func UserAccessTokenColumns() []string {
	return []string{
		UserAccessToken_UserID,
		UserAccessToken_Token,
		UserAccessToken_UpdatedAt,
	}
}

func (uat *UserAccessToken) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case UserAccessToken_UserID:
			ret = append(ret, &uat.UserID)
		case UserAccessToken_Token:
			ret = append(ret, &uat.Token)
		case UserAccessToken_UpdatedAt:
			ret = append(ret, &uat.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (uat *UserAccessToken) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case UserAccessToken_UserID:
			ret = append(ret, uat.UserID)
		case UserAccessToken_Token:
			ret = append(ret, uat.Token)
		case UserAccessToken_UpdatedAt:
			ret = append(ret, uat.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newUserAccessToken_Decoder returns a decoder which reads a row from *spanner.Row
// into UserAccessToken. The decoder is not goroutine-safe. Don't use it concurrently.
func newUserAccessToken_Decoder(cols []string) func(*spanner.Row) (*UserAccessToken, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*UserAccessToken, error) {
		var uat UserAccessToken
		ptrs, err := uat.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &uat, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (uat *UserAccessToken) Insert(ctx context.Context) *spanner.Mutation {
	uat.UpdatedAt = spanner.CommitTimestamp
	return spanner.Insert("UserAccessToken", UserAccessTokenColumns(), []interface{}{
		uat.UserID, uat.Token, uat.UpdatedAt,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (uat *UserAccessToken) Update(ctx context.Context) *spanner.Mutation {
	uat.UpdatedAt = spanner.CommitTimestamp
	return spanner.Update("UserAccessToken", UserAccessTokenColumns(), []interface{}{
		uat.UserID, uat.Token, uat.UpdatedAt,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (uat *UserAccessToken) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	uat.UpdatedAt = spanner.CommitTimestamp
	return spanner.InsertOrUpdate("UserAccessToken", UserAccessTokenColumns(), []interface{}{
		uat.UserID, uat.Token, uat.UpdatedAt,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (uat *UserAccessToken) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, UserAccessTokenPrimaryKeys()...)

	values, err := uat.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "UserAccessToken.UpdateColumns", "UserAccessToken", err)
	}

	return spanner.Update("UserAccessToken", colsWithPKeys, values), nil
}

// FindUserAccessToken gets a UserAccessToken by primary key
func FindUserAccessToken(ctx context.Context, db YORODB, userID string) (*UserAccessToken, error) {
	key := spanner.Key{userID}
	row, err := db.ReadRow(ctx, "UserAccessToken", key, UserAccessTokenColumns())
	if err != nil {
		return nil, newError("FindUserAccessToken", "UserAccessToken", err)
	}

	decoder := newUserAccessToken_Decoder(UserAccessTokenColumns())
	uat, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindUserAccessToken", "UserAccessToken", err)
	}

	return uat, nil
}

// ReadUserAccessToken retrieves multiples rows from UserAccessToken by KeySet as a slice.
func ReadUserAccessToken(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*UserAccessToken, error) {
	var res []*UserAccessToken

	decoder := newUserAccessToken_Decoder(UserAccessTokenColumns())

	rows := db.Read(ctx, "UserAccessToken", keys, UserAccessTokenColumns())
	err := rows.Do(func(row *spanner.Row) error {
		uat, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, uat)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadUserAccessToken", "UserAccessToken", err)
	}

	return res, nil
}

// Delete deletes the UserAccessToken from the database.
func (uat *UserAccessToken) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := uat.columnsToValues(UserAccessTokenPrimaryKeys())
	return spanner.Delete("UserAccessToken", spanner.Key(values))
}
