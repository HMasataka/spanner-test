// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// UserScore represents a row from 'UserScore'.
type UserScore struct {
	UserID    string    `spanner:"UserID" json:"UserID"`       // UserID
	Score     int64     `spanner:"Score" json:"Score"`         // Score
	UpdatedAt time.Time `spanner:"UpdatedAt" json:"UpdatedAt"` // UpdatedAt
}

const UserScore_UserID = "UserID"
const UserScore_Score = "Score"
const UserScore_UpdatedAt = "UpdatedAt"

func UserScorePrimaryKeys() []string {
	return []string{
		UserScore_UserID,
	}
}

func UserScoreColumns() []string {
	return []string{
		UserScore_UserID,
		UserScore_Score,
		UserScore_UpdatedAt,
	}
}

func (us *UserScore) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case UserScore_UserID:
			ret = append(ret, &us.UserID)
		case UserScore_Score:
			ret = append(ret, &us.Score)
		case UserScore_UpdatedAt:
			ret = append(ret, &us.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (us *UserScore) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case UserScore_UserID:
			ret = append(ret, us.UserID)
		case UserScore_Score:
			ret = append(ret, us.Score)
		case UserScore_UpdatedAt:
			ret = append(ret, us.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newUserScore_Decoder returns a decoder which reads a row from *spanner.Row
// into UserScore. The decoder is not goroutine-safe. Don't use it concurrently.
func newUserScore_Decoder(cols []string) func(*spanner.Row) (*UserScore, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*UserScore, error) {
		var us UserScore
		ptrs, err := us.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &us, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (us *UserScore) Insert(ctx context.Context) *spanner.Mutation {
	us.UpdatedAt = spanner.CommitTimestamp
	return spanner.Insert("UserScore", UserScoreColumns(), []interface{}{
		us.UserID, us.Score, us.UpdatedAt,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (us *UserScore) Update(ctx context.Context) *spanner.Mutation {
	us.UpdatedAt = spanner.CommitTimestamp
	return spanner.Update("UserScore", UserScoreColumns(), []interface{}{
		us.UserID, us.Score, us.UpdatedAt,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (us *UserScore) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	us.UpdatedAt = spanner.CommitTimestamp
	return spanner.InsertOrUpdate("UserScore", UserScoreColumns(), []interface{}{
		us.UserID, us.Score, us.UpdatedAt,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (us *UserScore) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, UserScorePrimaryKeys()...)

	values, err := us.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "UserScore.UpdateColumns", "UserScore", err)
	}

	return spanner.Update("UserScore", colsWithPKeys, values), nil
}

// FindUserScore gets a UserScore by primary key
func FindUserScore(ctx context.Context, db YORODB, userID string) (*UserScore, error) {
	key := spanner.Key{userID}
	row, err := db.ReadRow(ctx, "UserScore", key, UserScoreColumns())
	if err != nil {
		return nil, newError("FindUserScore", "UserScore", err)
	}

	decoder := newUserScore_Decoder(UserScoreColumns())
	us, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindUserScore", "UserScore", err)
	}

	return us, nil
}

// ReadUserScore retrieves multiples rows from UserScore by KeySet as a slice.
func ReadUserScore(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*UserScore, error) {
	var res []*UserScore

	decoder := newUserScore_Decoder(UserScoreColumns())

	rows := db.Read(ctx, "UserScore", keys, UserScoreColumns())
	err := rows.Do(func(row *spanner.Row) error {
		us, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, us)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadUserScore", "UserScore", err)
	}

	return res, nil
}

// Delete deletes the UserScore from the database.
func (us *UserScore) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := us.columnsToValues(UserScorePrimaryKeys())
	return spanner.Delete("UserScore", spanner.Key(values))
}
