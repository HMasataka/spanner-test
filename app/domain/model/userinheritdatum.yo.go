// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// UserInheritDatum represents a row from 'UserInheritData'.
type UserInheritDatum struct {
	UserID    string    `spanner:"UserID" json:"UserID"`       // UserID
	Code      string    `spanner:"Code" json:"Code"`           // Code
	UpdatedAt time.Time `spanner:"UpdatedAt" json:"UpdatedAt"` // UpdatedAt
}

const UserInheritData_UserID = "UserID"
const UserInheritData_Code = "Code"
const UserInheritData_UpdatedAt = "UpdatedAt"

func UserInheritDatumPrimaryKeys() []string {
	return []string{
		UserInheritData_UserID,
	}
}

func UserInheritDatumColumns() []string {
	return []string{
		UserInheritData_UserID,
		UserInheritData_Code,
		UserInheritData_UpdatedAt,
	}
}

func (uid *UserInheritDatum) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case UserInheritData_UserID:
			ret = append(ret, &uid.UserID)
		case UserInheritData_Code:
			ret = append(ret, &uid.Code)
		case UserInheritData_UpdatedAt:
			ret = append(ret, &uid.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (uid *UserInheritDatum) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case UserInheritData_UserID:
			ret = append(ret, uid.UserID)
		case UserInheritData_Code:
			ret = append(ret, uid.Code)
		case UserInheritData_UpdatedAt:
			ret = append(ret, uid.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newUserInheritDatum_Decoder returns a decoder which reads a row from *spanner.Row
// into UserInheritDatum. The decoder is not goroutine-safe. Don't use it concurrently.
func newUserInheritDatum_Decoder(cols []string) func(*spanner.Row) (*UserInheritDatum, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*UserInheritDatum, error) {
		var uid UserInheritDatum
		ptrs, err := uid.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &uid, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (uid *UserInheritDatum) Insert(ctx context.Context) *spanner.Mutation {
	uid.UpdatedAt = spanner.CommitTimestamp
	return spanner.Insert("UserInheritData", UserInheritDatumColumns(), []interface{}{
		uid.UserID, uid.Code, uid.UpdatedAt,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (uid *UserInheritDatum) Update(ctx context.Context) *spanner.Mutation {
	uid.UpdatedAt = spanner.CommitTimestamp
	return spanner.Update("UserInheritData", UserInheritDatumColumns(), []interface{}{
		uid.UserID, uid.Code, uid.UpdatedAt,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (uid *UserInheritDatum) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	uid.UpdatedAt = spanner.CommitTimestamp
	return spanner.InsertOrUpdate("UserInheritData", UserInheritDatumColumns(), []interface{}{
		uid.UserID, uid.Code, uid.UpdatedAt,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (uid *UserInheritDatum) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, UserInheritDatumPrimaryKeys()...)

	values, err := uid.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "UserInheritDatum.UpdateColumns", "UserInheritData", err)
	}

	return spanner.Update("UserInheritData", colsWithPKeys, values), nil
}

// FindUserInheritDatum gets a UserInheritDatum by primary key
func FindUserInheritDatum(ctx context.Context, db YORODB, userID string) (*UserInheritDatum, error) {
	key := spanner.Key{userID}
	row, err := db.ReadRow(ctx, "UserInheritData", key, UserInheritDatumColumns())
	if err != nil {
		return nil, newError("FindUserInheritDatum", "UserInheritData", err)
	}

	decoder := newUserInheritDatum_Decoder(UserInheritDatumColumns())
	uid, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindUserInheritDatum", "UserInheritData", err)
	}

	return uid, nil
}

// ReadUserInheritDatum retrieves multiples rows from UserInheritDatum by KeySet as a slice.
func ReadUserInheritDatum(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*UserInheritDatum, error) {
	var res []*UserInheritDatum

	decoder := newUserInheritDatum_Decoder(UserInheritDatumColumns())

	rows := db.Read(ctx, "UserInheritData", keys, UserInheritDatumColumns())
	err := rows.Do(func(row *spanner.Row) error {
		uid, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, uid)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadUserInheritDatum", "UserInheritData", err)
	}

	return res, nil
}

// Delete deletes the UserInheritDatum from the database.
func (uid *UserInheritDatum) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := uid.columnsToValues(UserInheritDatumPrimaryKeys())
	return spanner.Delete("UserInheritData", spanner.Key(values))
}
